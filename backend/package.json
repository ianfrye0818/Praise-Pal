{
  "name": "praisepal",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "docker:build-prod": "docker buildx build --platform linux/amd64,linux/arm64 -t ianfrye/praisepal-backend:prod .",
    "docker:build-staging": "docker buildx build --platform linux/amd64,linux/arm64 -t ianfrye/praisepal-backend:staging .",
    "docker:build-dev": "docker buildx build --platform linux/amd64,linux/arm64 -t ianfrye/praisepal-backend:dev .",
    "docker:push-prod": "docker push ianfrye/praisepal-backend:prod",
    "docker:push-staging": "docker push ianfrye/praisepal-backend:staging",
    "docker:push-dev": "docker push ianfrye/praisepal-backend:dev",
    "docker:deploy-prod": "docker-compose up -d",
    "docker:deploy-staging": "docker-compose -f docker-compose.staging.yaml up -d",
    "docker:deploy-db": "docker-compose -f docker-compose.db.yaml up -d",
    "docker:prod": "docker buildx build --platform linux/amd64,linux/arm64 --push -t ianfrye/praisepal-backend:prod .",
    "docker:staging": "docker buildx build --platform linux/amd64,linux/arm64 --push -t ianfrye/praisepal-backend:staging .",
    "docker:dev": "docker buildx build --platform linux/amd64,linux/arm64 --push -t ianfrye/praisepal-backend:dev .",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "start:generate": "npx prisma generate && npm run start:prod",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "db:seed": "ts-node src/seed.ts",
    "db:reset": "prisma migrate reset --force && prisma migrate dev --name init",
    "db:generate": "prisma migrate dev --name init && primsa generate"
  },
  "dependencies": {
    "@faker-js/faker": "^8.4.1",
    "@nestjs/common": "^10.0.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/jwt": "^10.2.0",
    "@nestjs/mapped-types": "^2.0.5",
    "@nestjs/passport": "^10.0.3",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/schedule": "^4.0.2",
    "@nestjs/throttler": "^5.1.2",
    "@prisma/client": "^5.15.0",
    "@sendgrid/mail": "^8.1.3",
    "bcryptjs": "^2.4.3",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "cookie-parser": "^1.4.6",
    "dotenv": "^16.4.5",
    "ioredis": "^5.4.1",
    "jsonwebtoken": "^9.0.2",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "reflect-metadata": "^0.2.0",
    "resend": "^3.4.0",
    "rxjs": "^7.8.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/bcryptjs": "^2.4.6",
    "@types/cookie-parser": "^1.4.7",
    "@types/dotenv": "^8.2.0",
    "@types/express": "^4.17.17",
    "@types/jest": "^29.5.2",
    "@types/node": "^20.14.10",
    "@types/passport-jwt": "^4.0.1",
    "@types/passport-local": "^1.0.38",
    "@types/supertest": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "copy-webpack-plugin": "^12.0.2",
    "eslint": "^8.42.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "prisma": "^5.15.0",
    "source-map-support": "^0.5.21",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3",
    "webpack": "^5.92.1"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
