generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String              @id @default(cuid())
  firstName     String
  lastName      String
  email         String              @unique
  password      String
  role          Role                @default(USER)
  companyCode   String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deletedAt     DateTime?
  isActive      Boolean             @default(true)
  comments      Comment[]
  commentLkes   Comment_Like[]
  kudoLikes     Kudo_Like[]
  receivedKudos Kudos[]             @relation("ReceivedKudos")
  sentKudos     Kudos[]             @relation("SentKudos")
  refreshTokens RefreshToken[]
  company       Company             @relation(fields: [companyCode], references: [companyCode], onDelete: Cascade)
  newUser       UserNotifications[] @relation("newUser")
  notifications UserNotifications[] @relation("user")
  settings      UserSettings[]
}

model Company {
  companyCode    String              @id
  name           String
  address        String?
  city           String?
  state          String?
  zip            String?
  phone          String
  status         CompanyStatus       @default(PENDING)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  deletedAt      DateTime?
  kudos          Kudos[]
  users          User[]
  companyContacts CompanyContact[]
  notifications  UserNotifications[]
}

model CompanyContact {
  id          String   @id @default(cuid())
  companyCode String   
  firstName   String
  lastName    String
  email       String
  phone       String
  bestTimeToContact BestTimeToContact
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyCode], references: [companyCode], onDelete: Cascade)
}

model Kudos {
  id                String              @id @default(cuid())
  senderId          String
  receiverId        String
  companyCode       String
  message           String
  title             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  likes             Int                 @default(0)
  isAnonymous       Boolean             @default(false)
  isHidden          Boolean             @default(false)
  comments          Comment[]
  kudoLikes         Kudo_Like[]
  company           Company             @relation(fields: [companyCode], references: [companyCode], onDelete: Cascade)
  receiver          User                @relation("ReceivedKudos", fields: [receiverId], references: [userId])
  sender            User                @relation("SentKudos", fields: [senderId], references: [userId])
  userNotifications UserNotifications[]
}

model Comment {
  id                String              @id @default(cuid())
  kudosId           String
  parentId          String?
  userId            String
  likes             Int                 @default(0)
  content           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  kudos             Kudos               @relation(fields: [kudosId], references: [id], onDelete: Cascade)
  parentComment     Comment?            @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  comments          Comment[]           @relation("CommentToComment")
  user              User                @relation(fields: [userId], references: [userId], onDelete: Cascade)
  commentLikes      Comment_Like[]
  usernotifications UserNotifications[]
}

model Kudo_Like {
  userId  String
  kudosId String
  likedAt DateTime @default(now())
  kudos   Kudos    @relation(fields: [kudosId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, kudosId])
}

model Comment_Like {
  userId    String
  commentId String
  likedAt   DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, commentId])
}

model UserNotifications {
  id          String     @id @default(cuid())
  userId      String
  actionType  ActionType
  message     String
  newUserId   String?
  kudosId     String?
  commentId   String?
  companyCode String?
  company     Company?   @relation(fields: [companyCode], references: [companyCode])
  isRead      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comment     Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  kudo        Kudos?     @relation(fields: [kudosId], references: [id], onDelete: Cascade)
  newUser     User?      @relation("newUser", fields: [newUserId], references: [userId])
  user        User       @relation("user", fields: [userId], references: [userId])
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [userId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

enum Role {
  SUPER_ADMIN
  COMPANY_OWNER
  ADMIN
  USER
}

enum ActionType {
  COMMENT_LIKE
  KUDOS_LIKE
  COMMENT_COMMENT
  KUDOS_COMMENT
  KUDOS
  NEW_USER
  NEW_COMPANY
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum BestTimeToContact {
  MORNING
  AFTERNOON
  EVENING
  ANYTIME
}