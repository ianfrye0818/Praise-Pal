generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  COMPANY_OWNER
  ADMIN
  USER
}

model User {
  userId        String              @id @default(cuid())
  firstName     String
  lastName      String
  email         String              @unique
  password      String
  role          Role                @default(USER)
  companyCode   String
  company       Company             @relation(fields: [companyCode], references: [companyCode], onDelete: Cascade, onUpdate: Cascade)
  notifications UserNotifications[] @relation("user")
  newUser       UserNotifications[] @relation("newUser")
  settings      UserSettings[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deletedAt     DateTime?
  sentKudos     Kudos[]             @relation(name: "SentKudos")
  receivedKudos Kudos[]             @relation(name: "ReceivedKudos")
  kudoLikes     Kudo_Like[]
  refreshTokens RefreshToken[]
  comments      Comment[]
  commentLkes   Comment_Like[]
  isActive      Boolean             @default(true)
}

model Company {
  companyCode String    @id
  name        String
  address     String?
  city        String?
  state       String?
  zip         String?
  phone       String?
  users       User[]
  kudos       Kudos[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Kudos {
  id                String              @id @default(cuid())
  senderId          String
  receiverId        String
  companyCode       String
  message           String
  title             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  likes             Int                 @default(0)
  isAnonymous       Boolean             @default(false)
  isHidden          Boolean             @default(false)
  comments          Comment[]
  sender            User                @relation(fields: [senderId], references: [userId], name: "SentKudos")
  receiver          User                @relation(fields: [receiverId], references: [userId], name: "ReceivedKudos")
  company           Company             @relation(fields: [companyCode], references: [companyCode], onDelete: Cascade, onUpdate: Cascade)
  kudoLikes         Kudo_Like[]
  userNotifications UserNotifications[]
}

model Comment {
  id                String              @id @default(cuid())
  kudosId           String
  parentId          String?
  userId            String
  likes             Int                 @default(0)
  content           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  kudos             Kudos               @relation(fields: [kudosId], references: [id], onDelete: Cascade)
  user              User                @relation(fields: [userId], references: [userId], onDelete: Cascade)
  parentComment     Comment?            @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  comments          Comment[]           @relation("CommentToComment")
  commentLikes      Comment_Like[]
  usernotifications UserNotifications[]
}

model Kudo_Like {
  userId  String
  kudosId String
  likedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  kudos   Kudos    @relation(fields: [kudosId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, kudosId])
}

model Comment_Like {
  userId    String
  commentId String
  likedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, commentId])
}

model UserNotifications {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [userId], name: "user")
  actionType ActionType
  message    String
  newUserId  String?
  newUser    User?      @relation(fields: [newUserId], references: [userId], name: "newUser")
  kudosId    String?
  commentId  String?
  comment    Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  kudo       Kudos?     @relation(fields: [kudosId], references: [id], onDelete: Cascade)
  isRead     Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
}

model UserSettings {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [userId])
  settings  Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ActionType {
  COMMENT_LIKE
  KUDOS_LIKE
  COMMENT_COMMENT
  KUDOS_COMMENT
  KUDOS
  NEW_USER
}
